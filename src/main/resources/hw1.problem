% Homework 1. Metamodeling.
% Please use the following names for the concepts in the homework.

% Camera  communicatesWith ComputerInstance computerRepository computers ComputerType
% computerType Controller CPS CPSModel dependsOnSpecificSoftware designs
% directAlarmConnection directSensorConnection extraHardware FireAlarm Hardware
% HeatController installedSoftwares LightController Sensor SmokeDetector SoftwareInstance
% softwareRepository SoftwareType softwareType Thermometer VideoCard

% % Write your metamodel below this

class CPSModel {
    /* The CPSModel may contain multiple different software types organized in a
       software repository.*/
    contains SoftwareType[] softwareRepository
    /* Similarly, the CPSModel may contain multiple different computer types in the
       form of a computer repository. */
    contains ComputerType[] computerRepository
    /* The CPSModel may consists of multiple different CPS desings.*/
    contains CPS[] designs
}

/* A CPS describes a configuration of computers*/
class CPS {
    contains ComputerInstance[1..*] computers
}
/* A software type describes a software in the market.
Each software might be purchased and installed multiple times:
those are called software instances.  */
class SoftwareType {
    /* Each software type may depend on multiple other softwares,
       which can be denoted by the dependsOnSpecificSoftware reference. */
    SoftwareType[] dependsOnSpecificSoftware
}
/* A Software instance denotes the copy of Software type installed on a computer.
  Each software instance may have different configurations and licenses.*/
class SoftwareInstance {
    /* The softwareType relation connects the instances with the types. */
    SoftwareType[1] softwareType
}
/* A computer type describes a computer (hardware) in the market.
Each hardware can have multiple instance.*/
class ComputerType.
/* A computer instance dentoes the copy of a hardware.
Each instance can be configured in a different way*/
class ComputerInstance{
    /* The computerType relation connects the instances with the types. */
    ComputerType[1] computerType
    /* Each computer can communicate with others.
      Communication must be mutual. */
    ComputerInstance[] communicatesWith opposite communicatesWith
    /* Each computer may have some installed software instances. */
    contains SoftwareInstance[] installedSoftwares
    /* Additionally, each computer may contain some
    extra hardware. */
    contains Hardware[0..3] extraHardware
}

/* A hardware describes an extra equipment for computers
(like sensors, controllers or special video cards)*/
abstract class Hardware.

abstract class Sensor extends Hardware.
/* A Camera is a sensor */
class Camera extends Sensor.
/* A Thermometer is a sensor */
class Thermometer extends Sensor.
/* A SmokeDetector is a sensor */
class SmokeDetector extends Sensor {
    /* A specialty of the smokedetector is that it has a direct
connection to at least a single alarm */
    FireAlarm[1..*] directAlarmConnection opposite directSensorConnection
}
abstract class Controller extends Hardware.
/* A HeatController is a controller */
class HeatController extends Controller.
/* A LightController is a controller */
class LightController extends Controller.
/* A FireAlarm is a controller */
class FireAlarm extends Controller {
    /* A specialty of the FireAlarm is that it has a direct connection
    to at leas a single SmokeDetector */
    SmokeDetector[1..*] directSensorConnection opposite directAlarmConnection
}

class VideoCard extends Hardware.


% % Please do not modify anything below this line. Do not delete this line!

% % Stage 1.

% % Close world assumption 1.
% !exists(CPSModel::new).
% !exists(SoftwareType::new).
% default !softwareRepository(*,*).
% default !dependsOnSpecificSoftware(*,*).

% % Instance model 1.
% CPSModel(model).
% /**
%     There are two kinds of Operating Systems in the repository.
% */
% softwareRepository(model,raspberryPiOS).
% softwareRepository(model,fedoraLinux).
% /**
%     There are multiple image processing softwares.
% */
% softwareRepository(model,yolov8).
% softwareRepository(model,yolov10).
% softwareRepository(model,openCV).
% dependsOnSpecificSoftware(yolov8,fedoraLinux).
% dependsOnSpecificSoftware(yolov10,fedoraLinux).
% dependsOnSpecificSoftware(openCV,fedoraLinux).
% /**
%     There os a java-based control panel system, that works everywhere.
% */
% softwareRepository(model,openHAB).

% % Stage 2.

% % Close world assumption 2.
% !exists(ComputerType::new).
% !exists(ComputerInstance::new).
% default !computerType(*,*).

% % Instance model 2.
% /**
%     There are multiple versions of raspberry computers.
%     The PC describes a generic desktop computer; no details are
%     added at the current stage.
% */
% computerRepository(model,raspberryPi3).
% computerRepository(model,raspberryPi4).
% computerRepository(model,raspberryPi5).
% computerRepository(model,raspberryPi5).
% computerRepository(model,pc).

% /**
%     myHome is the CPS system of the intelligent house
% */
% designs(model,myHome).

% /**
%     Everything is controlled by a central pc computer called server.
% */
% computers(myHome, server).
% computerType(server,pc).

% /**
%     There are two computers with cameras and light controllers.
% */
% computers(myHome, cam1Computer).
% computerType(cam1Computer,raspberryPi5).
% computers(myHome, cam2Computer).
% computerType(cam2Computer,raspberryPi5).

% /**
%     There is a temperature controller responsible for heating.
% */
% computers(myHome, temperatureController).
% computerType(temperatureController,raspberryPi5).

% % Stage 3.

% % Close world assumption 3.
% !exists(SoftwareInstance::new).
% default !softwareType(*,*).
% default !installedSoftwares(*,*).

% % Instance model 3.

% installedSoftwares(server,imageProcessing).
% softwareType(imageProcessing,yolov8).
% installedSoftwares(server,serverOS).
% softwareType(serverOS,fedoraLinux).

% installedSoftwares(cam1Computer, cam1OS).
% softwareType(cam1OS,raspberryPiOS).

% installedSoftwares(cam2Computer, cam2OS).
% softwareType(cam2OS,raspberryPiOS).

% installedSoftwares(temperatureController, temperatureOS).
% softwareType(temperatureOS,raspberryPiOS).

% % Stage 4.

% % Close world assumption 4.
% !exists(Camera::new).
% !exists(Thermometer::new).
% !exists(SmokeDetector::new).
% !exists(HeatController::new).
% !exists(LightController::new).
% !exists(FireAlarm::new).
% !exists(VideoCard::new).

% default !extraHardware(*,*).

% % Instance model 4.

% extraHardware(server,nvidiaCard).
% VideoCard(nvidiaCard).
% extraHardware(server, fireAlarm).
% FireAlarm(fireAlarm).

% extraHardware(cam1Computer,camera1).
% Camera(camera1).
% extraHardware(cam1Computer,light1).
% LightController(light1).
% extraHardware(cam1Computer,thermometer1).
% Thermometer(thermometer1).

% extraHardware(cam2Computer,camera2).
% Camera(camera2).
% extraHardware(cam2Computer,light2).
% LightController(light2).
% extraHardware(cam2Computer,thermometer2).
% Thermometer(thermometer2).

% extraHardware(temperatureController,heatController).
% HeatController(heatController).
% extraHardware(temperatureController,smokeDetector).
% SmokeDetector(smokeDetector).

% % Stage 5.

% % Close world assumption 5.
% default !directSensorConnection(*,*).
% default !directAlarmConnection(*,*).
% default !communicatesWith(*,*).

% % Instance model 5.
% /**
%     In the network, every computer communicates with the server.
% */
% communicatesWith(server, cam1Computer).
% communicatesWith(cam1Computer, server).
% communicatesWith(server, cam2Computer).
% communicatesWith(cam2Computer, server).
% communicatesWith(server, temperatureController).
% communicatesWith(temperatureController, server).

% /**
%     Additionally, there is a direct link between the alarm
%     and the smoke detector.
% */
% directSensorConnection(fireAlarm,smokeDetector).
% directAlarmConnection(smokeDetector,fireAlarm).